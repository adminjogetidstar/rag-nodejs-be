stages:
  - docker_build
  - scan
  - docker_push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  IMAGE_NAME: adminjogetids/rag-backend

before_script:
  - echo "ðŸš€ Start CI/CD pipeline"

# Stage 1: Build Docker Image
docker_build:
  stage: docker_build
  image: docker:24.0.5
  services:
    - docker:dind
  script:
    - docker build --pull --no-cache -t $IMAGE_NAME:latest .
    - docker save -o docker-image.tar $IMAGE_NAME:latest
  artifacts:
    paths:
      - docker-image.tar
    expire_in: 1h
  only:
    - main

# Stage 2a: Scan File System
scan_fs:
  stage: scan
  image:
    name: aquasec/trivy:latest
    entrypoint: [""]
  script:
    - trivy fs --exit-code 1 --severity HIGH,CRITICAL .
  needs: []

# Stage 2b: Scan Docker Image
scan_image:
  stage: scan
  needs:
    - job: docker_build
      artifacts: true
  image: docker:24.0.5
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
    - mv ./bin/trivy /usr/local/bin/trivy
  script:
    - docker load -i docker-image.tar
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $IMAGE_NAME:latest

# Stage 3: Push Docker Image to Docker Hub
docker_push:
  stage: docker_push
  needs:
    - job: docker_build
      artifacts: true
    - job: scan_fs
    - job: scan_image
  image: docker:24.0.5
  services:
    - docker:dind
  script:
    - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - docker load -i docker-image.tar
    - docker push $IMAGE_NAME:latest
  only:
    - main

# Stage 4: Deploy ke VPS dengan docker-compose
deploy_vps:
  stage: deploy
  image: alpine:latest
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
  script:
    - echo "ðŸ”‘ Deploying to VPS"
    - |
      ssh -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST "
        cd ~/project/ai-rag &&
        echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin &&
        docker pull $IMAGE_NAME:latest &&
        docker compose up -d backend
      "
  after_script:
    - echo "âœ… Deploy finished"
  only:
    - main
  allow_failure: false
